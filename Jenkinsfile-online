       //比如服务A,B，开发完成，是直接对服务进行测试还是合并后再测试？
       //在开发分支测试，为什么不能再faeture分支测试呢？因为是临时的，并且这样的话流水线太多。
       //如何develop分支有在测试的需求，那么则不能进行代码合并？（可以多建立几条develop分支。并行测试通过后在直接合并。）
       //feature分支合并到develop分支，develop分支发布到测试环境，
       //使用golangci-lint检查代码
       //sonar静态分析
       //单元测试
       //功能测试
       //回归测试
       //gate?
       //扫描镜像
       //改一下标签commit触发CD，触发测试环境CD
       //cd到测试环境，等待review。
       //失败，git回退。
       //分支怎么合并的来着？
         //通过，更新生产commit，CD生产。
           //git回退。
       //（整个的流程，都根据需求来演进。）
pipeline {
  agent {
      kubernetes {
        label 'hello'
        yaml '''
apiVersion: v1
kind: Pod
metadata:
   name: clean-ci
spec:
   containers:
   - name: docker
     image: 'docker:stable-dind'
     command:
     - dockerd
     - --host=unix:///var/run/docker.sock
     - --host=tcp://0.0.0.0:8000
     - --insecure-registry=157.230.248.65:30002
     securityContext:
       privileged: true
     volumeMounts:
     - mountPath: /var/run
       name: cache-dir
   - name: clean-ci
     image: 'docker:stable'
     command: ["/bin/sh"]
     args: ["-c","while true; do sleep 86400; done"]
     volumeMounts:
     - mountPath: /var/run
       name: cache-dir
   //代码检查
   - name: go-lint
     image: 'mwendler/wget'
     command: ["/bin/sh"]
     args: ["-c","wget -O- -nv https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s v1.50.1","while true; do sleep 86400; done"]
     volumeMounts:
     - mountPath: /var/run
       name: cache-dir

  //镜像扫描
   - name: trivy
     image: 'aquasec/trivy:0.21.1'
     command: ["/bin/sh"]
     args: ["-c","while true; do sleep 86400; done"]
     volumeMounts:
     - mountPath: /var/run
       name: cache-dir

   - name: kubectl
     image: '157.230.248.65:30002/myharbor/kubectl:v1.0'
     command: ["/bin/sh"]
     args: ["-c","while true; do sleep 86400; done"]
     volumeMounts:
     - mountPath: /var/run
       name: cache-dir
   volumes:
   - name: cache-dir
     emptyDir: {}

        '''.stripIndent()
          }
          }
    stages {
        stage ('checkout scm') {
            steps {
                checkout(scm)
            }
       }
       //加入sonar
        stage ('') {
            steps {
                 checkout(scm)
             }
       }




       //单元测试
        stage ('checkout scm') {
            steps {
                checkout(scm)
            }
       }

        //
        stage ('checkout scm') {
            steps {
                checkout(scm)
            }
       }
        stage('Build') {
            steps {
              container ('docker'){
              sh 'docker build -t 157.230.248.65:30002/myharbor/gojgq:v3 .'
              sh 'docker login 157.230.248.65:30002 -u jgq -p Jgq123456'
              sh 'docker push 157.230.248.65:30002/myharbor/gojgq:v3'
              sh '''
              echo "you did it!!!!!!!  yes!!"
              '''
        }
      }
        }

        //镜像扫描
        stage('scan with trivy') {
            steps {
                container ('trivy')
                sh "trivy image -f json -o results.json nginx:1.18"
                recordIssues(tools: [trivy(pattern: 'results.json')])
            }
        }




 /*       stage('deploy to dev'){
 *         steps {
 *            container ('kubectl'){
 *                   sh '  kubectl apply -f ./yml/my.yaml'
 *            }
 *         }
 */      }


        //直接通过定义两个image scanner，自动修改指定镜像，完成测试环境与生产环境的操作。
        //git commit测试环境代码库，(考虑自动commit或者手动commit)，人工测试，通过就commit生产代码库。
           stage('push with tag'){
             steps {
                container ('docker'){
                    sh '''
                    echo "git push"
                    '''
                }
             }
           }

           stage('deploy to prod'){
             steps {
                //是否部署到生产环境。
                input(id: 'deploy-to-dev', message: 'deploy to dev?')
                container ('docker'){
                    sh '''
                    echo "deploy"
                    '''
                }
           }
            //添加回滚功能

     }
}
